apiVersion: v1
kind: ConfigMap
metadata:
  name: query.sql
  namespace: default
data:
  data.sql: |
    ALTER ROLE alfresco IN DATABASE postgres SET search_path TO public,appqueryperformancetest;

    CREATE OR REPLACE FUNCTION random_between(low INT ,high bigint) 
       RETURNS INT AS
    $$
    BEGIN
       RETURN floor(random()* (high-low + 1) + low);
    END;
    $$ language 'plpgsql' STRICT;

    set session query.process_definitions = '1000';
    set session query.process_instances = '1000';
    set session query.tasks = '1000';
    set session query.process_variables = '1000';
    set session query.task_variables = '1000';

    -- clean up
    DELETE FROM task_variable;
    DELETE FROM process_model;
    DELETE FROM process_variable;
    DELETE FROM task;
    DELETE FROM process_instance;
    DELETE FROM process_definition;

    -- Process Definitions
    INSERT INTO process_definition(id, name, description, process_definition_key, version)
    SELECT
      seq,
      'process_definition_' || seq AS name,
      'description process_definition_' || seq AS description,
      'process_definition_key_' || seq AS description,
      (RANDOM() * 2)::INT AS version
    FROM GENERATE_SERIES(1, current_setting('query.process_definitions')::int) seq;

    -- Process Instances
    INSERT INTO process_instance(id, process_definition_id, name, status, start_date, completed_date)
    WITH expanded AS (
      SELECT RANDOM(), seq, random_between(1, current_setting('query.process_definitions')::bigint) AS process_definition_id
      FROM GENERATE_SERIES(1, current_setting('query.process_instances')::int) seq
    ), shuffled AS (
      SELECT e.*, 
        CASE (RANDOM() * 2)::INT
          WHEN 0 THEN 'RUNNING'
          WHEN 1 THEN 'CREATED'
          WHEN 2 THEN 'COMPLETED'
        END AS status
      FROM expanded e
      INNER JOIN (
        SELECT ei.seq, MIN(ei.random) FROM expanded ei GROUP BY ei.seq
      ) em ON (e.seq = em.seq AND e.random = em.min)
      ORDER BY e.seq
    )
    SELECT
      s.seq as id,
      s.process_definition_id,
      'process ' || s.seq AS name,
      s.status,
      timestamp '2020-01-10 20:00:00' + (random() * (interval '90 days')) + '30 days' AS start_date,
      NOW() + (random() * (interval '90 days')) + '30 days' AS completed_date
    FROM shuffled s;

    -- Tasks
    INSERT INTO task(id, process_instance_id, name, status, priority, created_date, due_date)
    WITH expanded AS (
      SELECT RANDOM(), seq, random_between(1, current_setting('query.process_instances')::bigint) AS process_instance_id
      FROM GENERATE_SERIES(1, current_setting('query.tasks')::int) seq
    ), shuffled AS (
      SELECT e.*, 
        CASE (RANDOM() * 2)::INT
          WHEN 0 THEN 'CREATED'
          WHEN 1 THEN 'ASSIGNED'
          WHEN 2 THEN 'COMPLETED'
        END AS status
      FROM expanded e
      INNER JOIN (
        SELECT ei.seq, MIN(ei.random) FROM expanded ei GROUP BY ei.seq
      ) em ON (e.seq = em.seq AND e.random = em.min)
      ORDER BY e.seq
    )
    SELECT
      s.seq as id,
      s.process_instance_id,
      'task ' || s.seq AS name,
      s.status,
      (RANDOM() * 2)::INT AS priority,  
      timestamp '2020-01-10 20:00:00' + (random() * (interval '90 days')) + '30 days' AS created_date,
      NOW() + (random() * (interval '90 days')) + '30 days' AS due_date
    FROM shuffled s;

    DO $$ 
    DECLARE 
      i_start int8 := 1;
      i_increment int8 := 1;
      i_current int8 := 1;
      i_end int8 := 10000;
      i_page int8 := current_setting('query.process_variables')::int8;
    BEGIN
        WHILE i_current <= i_end
            LOOP
                -- Process Variables
                INSERT INTO process_variable(id, process_instance_id, name, type, value)
                WITH expanded AS (
                  SELECT RANDOM(), seq, random_between(1, i_page) AS process_instance_id
                  FROM GENERATE_SERIES(i_start + (i_page * (i_current-1)), i_page * i_current) seq
                ), shuffled AS (
                  SELECT e.*, 
                    (CASE (RANDOM() * 2)::INT
                      WHEN 0 THEN 'int'
                      WHEN 1 THEN 'string'
                      WHEN 2 THEN 'boolean'
                    END
                  ) as type
                  FROM expanded e
                  INNER JOIN (
                    SELECT ei.seq, MIN(ei.random) FROM expanded ei GROUP BY ei.seq
                  ) em ON (e.seq = em.seq AND e.random = em.min)
                  ORDER BY e.seq
                )
                SELECT
                  s.seq as id,
                  s.process_instance_id,
                  'proc_var_' || s.seq as name,
                  s.type,
                  (CASE 
                      WHEN s.type = 'int' THEN '{"value":1234}'
                      WHEN s.type = 'string' THEN '{"value":"something"}'
                      WHEN s.type = 'boolean' THEN '{"value":true}'
                    END
                  ) as value
                FROM shuffled s;

                i_current := i_current + i_increment;

            END LOOP;
    END$$;

    DO $$ 
    DECLARE 
      i_start int8 := 1;
      i_increment int8 := 1;
      i_current int8 := 1;
      i_end int8 := 10000;
      i_page int8 := current_setting('query.task_variables')::int8;
    BEGIN
        WHILE i_current <= i_end
            LOOP
                -- Task Variables
                INSERT INTO task_variable(id,task_id,name, type, value)
                WITH expanded AS (
                  SELECT RANDOM(), seq, random_between(1, i_page) AS task_id
                  FROM GENERATE_SERIES(i_start + (i_page * (i_current-1)), i_page * i_current) seq
                ), shuffled AS (
                  SELECT e.*, 
                    (CASE (RANDOM() * 2)::INT
                      WHEN 0 THEN 'int'
                      WHEN 1 THEN 'string'
                      WHEN 2 THEN 'boolean'
                    END
                  ) as type
                  FROM expanded e
                  INNER JOIN (
                    SELECT ei.seq, MIN(ei.random) FROM expanded ei GROUP BY ei.seq
                  ) em ON (e.seq = em.seq AND e.random = em.min)
                  ORDER BY e.seq
                )
                SELECT
                  s.seq as id,
                  s.task_id,
                  'task_var_' || s.seq as name,
                  s.type,
                  (CASE 
                      WHEN s.type = 'int' THEN '{"value":1234}'
                      WHEN s.type = 'string' THEN '{"value":"something"}'
                      WHEN s.type = 'boolean' THEN '{"value":true}'
                    END
                  ) as value
                FROM shuffled s;

                i_current := i_current + i_increment;

            END LOOP;
    END$$;    

---
apiVersion: batch/v1
kind: Job
metadata:
  name: psql-query
  namespace: default
spec:
  template:
    metadata:
      name: psql-query
      labels:
        service: psql-query
    spec:
      containers:
        - name: psql-query
          image: returnpath/psql
          args: [ "-f", "/mnt/psql/data.sql" ]
          envFrom:
            - secretRef:
                name: psql
          volumeMounts:
            - name: data
              mountPath: /mnt/psql
      volumes:
      - name: data
        configMap:
          name: query.sql
      restartPolicy: Never